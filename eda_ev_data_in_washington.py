# -*- coding: utf-8 -*-
"""EDA_EV_Data_in_Washington.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1gCV10AsZ5cbAtteI36-gyClNlKrgesw5
"""

import pandas as pd

ev_data = pd.read_csv(r'Electric_Vehicle_Population_Data.csv')

"""# Loading Dataset & Getting basic info about columns"""

print("Dataset Preview:")
print(ev_data.head(5))

print("\nDataset Info:")
ev_data.info()

print("\nMissing Values:")
print(ev_data.isnull().sum())

print("\nSummary Statistics:")
print(ev_data.describe())

print("\nUnique Values in Each Column:")
for column in ev_data.columns:
    print(f"{column}: {ev_data[column].nunique()} unique values")

"""# Handling Missing Values by Imputation"""

# Fill categorical missing values with 'Unknown'
ev_data['County'] = ev_data['County'].fillna('Unknown')
ev_data['City'] = ev_data['City'].fillna('Unknown')
ev_data['Electric Utility'] = ev_data['Electric Utility'].fillna('Unknown')

# Fill numerical missing values with the median
ev_data['Postal Code'] = ev_data['Postal Code'].fillna(method='ffill')
ev_data['Electric Range'] = ev_data['Electric Range'].fillna(ev_data['Electric Range'].median())
ev_data['Base MSRP'] = ev_data['Base MSRP'].fillna(ev_data['Base MSRP'].median())
ev_data['Legislative District'] = ev_data['Legislative District'].fillna(ev_data['Legislative District'].median())
ev_data['2020 Census Tract'] = ev_data['2020 Census Tract'].fillna(ev_data['2020 Census Tract'].median())

# For project, MODEL is essential in identifying specific EV models so the rows with missing MODEL values are invalid & should be removed.
ev_data = ev_data.dropna(subset=['Model'])

"""# Data Cleaning"""

# Ensure 'State' only contains "WA" (Washington State)
ev_data = ev_data[ev_data['State'] == 'WA']

ev_data = ev_data[ev_data['Electric Range'] >= 0]
ev_data = ev_data[ev_data['Base MSRP'] >= 0]

print("Cleaned Dataset Info:")
ev_data.info()

"""# Exploratory Data Analysis (EDA)"""

print("\nTop 10 Makes by Count:")
print(ev_data['Make'].value_counts().head(10))

print("\nTop 10 Models by Count:")
print(ev_data['Model'].value_counts().head(10))

# Analyze EV type distribution
print("\nElectric Vehicle Type Distribution:")
print(ev_data['Electric Vehicle Type'].value_counts())

# Analyze average electric range by vehicle make
average_range_by_make = ev_data.groupby('Make')['Electric Range'].mean().sort_values(ascending=False)
print("\nAverage Electric Range by Make (Top 10):")
print(average_range_by_make.head(10))

# Save the cleaned dataset for further use
ev_data.to_csv(r'Cleaned_EV_Population_Data.csv', index=False)

"""# Simple Viz"""

import matplotlib.pyplot as plt
import seaborn as sb

sb.set_theme(style="whitegrid")

# 1. EV Type Distribution
ev_type_distribution = ev_data['Electric Vehicle Type'].value_counts()
plt.figure(figsize=(8, 6))

sb.set(style="darkgrid")
plt.style.use('dark_background')
plt.bar([1, 2], [5, 2], color='#4CAF50')
fig, ax = plt.subplots(figsize=(6, 4))
dark_grey = '#1c1c1c'
fig.patch.set_facecolor(dark_grey)
ax.set_facecolor(dark_grey)

ev_type_distribution.plot(kind='bar', color='green')
plt.title("EV Type Distribution\n", color='white', fontsize = 14, fontweight = 'bold')
plt.xlabel("EV Type", color='white', fontsize = 12)
plt.ylabel("Number of Vehicles", color='white', fontsize = 12)
plt.xticks(rotation=0,color='white', fontsize = 8)
plt.yticks(rotation=0,color='white', fontsize = 8)
plt.show()

# 2. Top Makes by Count
top_makes = ev_data['Make'].value_counts().head(10)
#plt.figure(figsize=(8, 6))
#top_makes.plot(kind='bar', color='green')

sb.set(style="darkgrid")
plt.style.use('dark_background')
plt.bar([1, 2], [5, 2], color='#4CAF50')
fig, ax = plt.subplots(figsize=(6, 4))
dark_grey = '#1c1c1c'
fig.patch.set_facecolor(dark_grey)
ax.set_facecolor(dark_grey)

#plt.figure(figsize=(8, 6))
top_makes.plot(kind='bar', color='green')

plt.title("Top 10 EV Manufacturers\n", color='white', fontsize = 14, fontweight = 'bold')
plt.xlabel("Manufacturer", color='white', fontsize = 12)
plt.ylabel("Number of Vehicles", color='white', fontsize = 12)
plt.xticks(rotation=45,color='white', fontsize = 8)
plt.yticks(rotation=0,color='white', fontsize = 8)
plt.show()

#Heatmap Correlation
relevant_columns = ['Model Year', 'Electric Range', 'Base MSRP', 'Legislative District', '2020 Census Tract']
correlation_data = ev_data[relevant_columns].corr()

# Dark Theme Setup
sb.set(style="darkgrid")
plt.style.use('dark_background')
fig, ax = plt.subplots(figsize=(8, 6))

# Set background colors
dark_grey = '#1c1c1c'
fig.patch.set_facecolor(dark_grey)
ax.set_facecolor(dark_grey)

# Plot heatmap
sb.heatmap(
    correlation_data,
    annot=True,
    cmap='Greens',
    fmt=".2f",
    linewidths=0.5,
    cbar_kws={'label': 'Correlation'}
)

# Title and Labels
plt.title("Correlation Heatmap of Relevant Columns\n", color='white', fontsize=14, fontweight='bold')
plt.xticks(color='white', fontsize=10)
plt.yticks(color='white', fontsize=10)
plt.show()

sb.set(style="darkgrid")
plt.style.use('dark_background')
fig, ax = plt.subplots(figsize=(8, 6))

# Set background colors
dark_grey = '#1c1c1c'
fig.patch.set_facecolor(dark_grey)
ax.set_facecolor(dark_grey)

# Scatter Plot
plt.scatter(ev_data['Model Year'], ev_data['Electric Range'], color='#4CAF50', alpha=0.7)

# Title and Labels
plt.title("Electric Range vs. Model Year\n", color='white', fontsize=14, fontweight='bold')
plt.xlabel("Model Year", color='white', fontsize=12)
plt.ylabel("Electric Range (miles)", color='white', fontsize=12)

# Customizing Ticks
plt.xticks(color='white', fontsize=10)
plt.yticks(color='white', fontsize=10)

# Show Plot
plt.show()

from wordcloud import WordCloud
import matplotlib.pyplot as plt

# Combine all makes into a single string
make_text = ' '.join(ev_data['Make'].astype(str))

# Create the word cloud
wordcloud = WordCloud(
    width=800,
    height=400,
    background_color='#1c1c1c',  # Dark background
    colormap='Greens',  # Green color theme
    max_words=100,  # Limit to top 100 words
    random_state=42
).generate(make_text)

# Plot the word cloud
plt.figure(figsize=(10, 6))
plt.imshow(wordcloud, interpolation='bilinear')
plt.axis('off')  # Hide axes
plt.title("Word Cloud of EV Manufacturers\n", color='white', fontsize=16, fontweight='bold')
plt.gca().set_facecolor('#1c1c1c')  # Match background
plt.show()

# 3. Top Counties by EV Count
county_distribution = ev_data['County'].value_counts().head(10)
plt.figure(figsize=(8, 6))
county_distribution.plot(kind='bar', color='lightgreen')
plt.title("Top 10 Counties by EV Count")
plt.xlabel("County")
plt.ylabel("Number of Vehicles")
plt.xticks(rotation=45)
plt.show()

# 4. Average Electric Range by Make
avg_range_by_make = ev_data.groupby('Make')['Electric Range'].mean().sort_values(ascending=False)
plt.figure(figsize=(10, 6))
avg_range_by_make.head(10).plot(kind='barh', color='purple')
plt.title("Top 10 Makes by Average Electric Range")
plt.xlabel("Average Electric Range (miles)")
plt.ylabel("Make")
plt.gca().invert_yaxis()
plt.show()

# 5. Average Base MSRP by Make
avg_msrp_by_make = ev_data.groupby('Make')['Base MSRP'].mean().sort_values(ascending=False)
plt.figure(figsize=(10, 6))
avg_msrp_by_make.head(10).plot(kind='barh', color='orange')
plt.title("Top 10 Makes by Average Base MSRP")
plt.xlabel("Average MSRP (USD)")
plt.ylabel("Make")
plt.gca().invert_yaxis()
plt.show()